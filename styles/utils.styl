step = 16px
txtClr = #333
midClr = #ddd
brdClr = #ccc
hovClr = lightsteelblue
actClr = darkslateblue
selClr = steelblue

gradient1 = #fff
gradient2 = #ddd

bgClr = #eee
btnClr = slategrey
btnClr = slategrey
a
  color #777

headGr()
  background #fff linear-gradient(#f9f9f9, #f3f3f3) repeat-x
btnGr(clr = #fff)
  background clr linear-gradient(clr, darken(clr, 10)) repeat-x
btnGrHov(clr = #fff)
  background darken(clr, 10) linear-gradient(darken(clr, 10), clr) repeat-x

lh(h = (step*2))
  line-height h

brd()
  if arguments
    box-shadow arguments
  else
    box-shadow 0 0 0 1px #ccc
btn()
  display inline-block
  position relative
  padding 0 (step/2)
  margin 0
  border none
  if length(arguments) == 1
    background arguments[0]
  else
    btnGr()
  brd()
  color btnClr
  text-shadow 0 1px 0 #fff
  -webkit-appearance button
  &:hover
    color darken(@color,20)

scrollY()
  overflow-x: hidden
  overflow-y: auto

scrollX()
  overflow-y: hidden
  overflow-x: auto

rd(n = 3px)
  border-radius n
radiusTop(n = 3px)
  border-radius n n 0 0

radiusBottom(n = 3px)
  border-radius 0 0 n n

radiusLeft(n = 3px)
  border-radius n 0 0 n

radiusRight(n = 3px)
  border-radius 0 n n 0

minsize()
  if length(arguments) == 1
    min-width: arguments[0]
    min-height: arguments[0]
  else
    min-width: arguments[0]
    min-height: arguments[1]

circle(sz)
  size: (sz)
  border-radius 50%

center(w,h)
  width w
  height h
  position absolute
  top 50%
  left 50%
  margin-top (h/-2)
  margin-left (w/-2)

posall(n)
  position absolute
  top n
  right n
  bottom n
  left n

.poszero
  posall(0)



stripe(even = #fff, odd = #eee)
  background-color odd
  &.even
  &:nth-child(even)
   background-color even


// for row in (1...50)
//   &:nth-child({row})
//     background darken(#fff, row*1.2)


imp()
  unquote('!important')

lastChildSpacing(element = '*', property = 'padding-bottom')
  if element is '*'
    element = unquote(element)
  & > {element}:last-child
    {property} 0

generateGrid(increment, start, end, returnDimension=false)
  total = start
  for n, x in 0..((end - start) / increment)
    if returnDimension
      if x+1 is returnDimension
        return total
    else
      .column-{x+1}
        width total
    total = total + increment
